{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","modules/loading.js","lib/createRequestSaga.js","lib/api/client.js","lib/api/auth.js","modules/user.js","containers/common/HeaderContainer.js","modules/posts.js","lib/api/posts.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","modules/write.js","containers/post/PostViewerContainer.js","pages/PostPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButton.js","containers/write/WriteActionButtonsContainers.js","pages/WritePage.js","App.js","serviceWorker.js","modules/root.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","startLoading","createAction","reqeustType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","client","axios","create","logout","post","logoutSaga","userSaga","CHECK","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","tag","page","listPostSaga","queryString","qs","stringify","posts","lastPage","parseInt","headers","SubInfoBlock","hasMarginTop","SubInfo","publishDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","key","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","showWriteButton","withRouter","location","match","useEffect","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","readPost","id","unloadPost","readPostSaga","initialState","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","ownPost","status","dangerouslySetInnerHTML","__html","FullScreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","onCancel","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","onRemove","useState","modal","setModal","writeSaga","WRITE_POST","UPDATE_POST","initialize","changeField","value","writePost","setOriginalPost","updatePost","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","history","postId","params","push","a","async","delete","PostPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","REGISTER","LOGIN","form","initializeForm","register","password","login","registerSaga","loginSaga","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","StyleInput","input","Footer","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","authComplete","name","placeholder","style","marginTop","setError","setItem","JSON","target","preventDefault","LoginPage","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonBlock","StyleButton","WriteActionButton","onPublish","isEdit","goback","WritePage","App","component","path","exact","Boolean","window","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2914c60.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResponsiveBlock = styled.div`\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    width: 1024px;\r\n    margin: 0 auto;\r\n\r\n    // 브라우저 크기에 따른 가로 크기 변경\r\n    // 768px ~ 1024px, 아이패드, 랩탑\r\n    @media (max-width: 1024px) {\r\n        width: 768px;\r\n    }\r\n    // Mobile Device\r\n    // 768px 이하\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst Responsive = ({ children, ...rest }) => {\r\n    // style, className, onClick 등의 props를 사용할 수 있도록\r\n    // ...rest를 사용하여 ResponsiveBlock에게 전달\r\n    return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\r\n};\r\n\r\nexport default Responsive;\r\n","const palette = {\r\n    gray: [\r\n        '#f8f9fa',\r\n        '#f1f3f5',\r\n        '#e9ecef',\r\n        '#dee2e6',\r\n        '#ced4da',\r\n        '#adb5bd',\r\n        '#868e96',\r\n        '#495057',\r\n        '#343a40',\r\n        '#212529',\r\n    ],\r\n    cyan: [\r\n        '#e3fafc',\r\n        '#c5f6fa',\r\n        '#99e9f2',\r\n        '#66d9e8',\r\n        '#3bc9db',\r\n        '#22b8cf',\r\n        '#15aabf',\r\n        '#1098ad',\r\n        '#0c8599',\r\n        '#0b7285',\r\n    ],\r\n};\r\n\r\nexport default palette;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst buttonStyle = css`\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    padding: 0.25rem 1rem;\r\n    color: white;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    background: ${palette.gray[8]};\r\n    &:hover {\r\n        background: ${palette.gray[6]};\r\n    }\r\n\r\n    // 버튼 비활성화 시 css\r\n    &:disabled {\r\n        backgroun: ${palette.gray[3]};\r\n        color: ${palette.gray[5]};\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    ${props =>\r\n        props.fullWidth &&\r\n        css`\r\n            padding-top: 0.75rem;\r\n            padding-bottom: 0.75rem;\r\n            width: 100%;\r\n            font-size: 1.125rem;\r\n        `}\r\n\r\n    ${props =>\r\n        props.cyan &&\r\n        css`\r\n            background: ${palette.cyan[5]};\r\n            &:hover {\r\n                background: ${palette.cyan[4]};\r\n            }\r\n        `}\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n    ${buttonStyle}\r\n`;\r\n\r\n// Link 컴포넌트 직접 사용\r\nconst StyledLink = styled(Link)`\r\n    ${buttonStyle}\r\n`;\r\n\r\n// Button 컴포넌트 내부에서 props.to 값에 따라 StyledLink, StyledButton 사용할지 결정됨.\r\n// Header 컴포넌트에서 사용한 Button 컴포넌트는 to 속성이 존재하므로 StyledLink를 사용함.\r\n// StyledLink를 사용하는 과정에서 props.cyan 값을 숫자 1, 0 으로 변환 해줌.\r\n// 이는 styled() 함수로 감싸서 만든 컴포넌트의 경우 임의 props가 자동으로 필터링되지 않기 때문..\r\n// Link에서 사용하는 a 태그에 boolean의 값이 임의 props로 설정되는 것을 허용 x \r\n// 숫자 / 문자열만 허용하기 때문에 숫자형으로 변환해줌.\r\n\r\n// AuthForm 컴포넌트에서 사용한 Button 컴포넌트는 to 속성이 없으므로 StyledButton 사용\r\nconst Button = props => {\r\n    return props.to ? (\r\n        <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\r\n    ) : (\r\n        <StyledButton {...props} />\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from './Responsive';\r\nimport Button from './Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    background: white;\r\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\n// Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 작성\r\nconst Wrapper = styled(Responsive)`\r\n    height: 4rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between; // 자식 엘리멘트 사이 여백 최대화\r\n    .logo {\r\n        font-size: 1.125rem;\r\n        font-weight: 800;\r\n        letter-spacing: 2px;\r\n    }\r\n    .right {\r\n        display: flex;\r\n        align-items: right;\r\n    }\r\n`;\r\n\r\n// 헤더가 fixed로 되어 있기 때문에 페이지의 콘텐츠가 4rem 아래에 나타나도록 해 주는\r\nconst Spacer = styled.div`\r\n    height: 4rem;\r\n`;\r\n\r\nconst UserInfo = styled.div`\r\n    font-weight: 800;\r\n    margin-right: 1rem;\r\n`;\r\n\r\nconst Header = ({ user, onLogout }) => {\r\n    return (\r\n        <>\r\n            <HeaderBlock>\r\n                <Wrapper>\r\n                    <Link to=\"/\" className=\"logo\">\r\n                        REATERS\r\n                    </Link>\r\n                    {user ? (\r\n                        <div className=\"right\">\r\n                            <UserInfo>{user.username}</UserInfo>\r\n                            <Button onClick={onLogout}>로그아웃</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"right\">\r\n                            <Button to=\"/login\">로그인</Button>\r\n                        </div>\r\n                    )}\r\n                </Wrapper>\r\n            </HeaderBlock>\r\n            ;\r\n            <Spacer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { createAction, handleActions } from 'redux-actions';\r\n\r\n// 액션 타입 선언\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n// 요청을 위한 액션 타입을 payload로 설정\r\n\r\n// 액션 생성 함수\r\nexport const startLoading = createAction(\r\n    START_LOADING,\r\n    reqeustType => reqeustType,\r\n);\r\nexport const finishLoading = createAction(\r\n    FINISH_LOADING,\r\n    reqeustType => reqeustType,\r\n);\r\n\r\nconst initialState = {};\r\n\r\n// 리듀서\r\nconst loading = handleActions(\r\n    {\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true, // 로딩 중...\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false, // 로딩 끝\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default loading;","import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport function createRequestActionTypes(type) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return [type, SUCCESS, FAILURE];\r\n};\r\n\r\n// request = API 함수\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    // generation 함수 사용\r\n    // action은 각 모듈의 action 타입\r\n    return function*(action) {\r\n        yield put(startLoading(type)); // 로딩 시작\r\n        try {\r\n            // call(fn, ...args) 함수 fn를 args 인수로 호출\r\n            // request > 백엔드 서버에서 수행되는 작업. register, check ...\r\n            const response = yield call(request, action.payload);\r\n            // put : dispatch >>  액션 발생시키는 것 > 이후 reducer 실행\r\n            yield put({\r\n                // type_SUCCESS 액션 실행\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n                // response를 통해 HTTP 헤더 및 상태 코드를 조회 가능\r\n                meta: response,\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            });\r\n        }\r\n        yield put(finishLoading(type)); // 로딩 끝\r\n    };\r\n}\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\nexport default client;","import client from './client';\r\n\r\n// proxy 기능을 사용해 백엔드 서버로 요청하고 그 응답을 웹 애플리케이션(프런트엔드)에서 사용하게 해줌\r\n\r\n// 로그인\r\nexport const login = ({ username, password }) =>\r\n    client.post('/api/auth/login', { username, password });\r\n\r\n// 회원가입\r\nexport const register = ({ username, password }) =>\r\n    client.post('/api/auth/register', { username, password });\r\n\r\n// 로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n// 로그아웃\r\nexport const logout = () => client.post('api/auth/logout');\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { takeLatest, call } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\n// 액션 타입 선언\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst CHECK = 'user/CHECK';\r\nconst CHECK_SUCCESS = 'user/CHECK_SUCCESS';\r\nconst CHECK_FAILURE = 'user/CHECK_FAILURE';\r\nconst LOGOUT = 'user/LOGOUT'; // 로그아웃 액션\r\n\r\n// 액션 생성 함수\r\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\n// redux-saga 생성 (action type, func) API 함수 호출\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check); // 제너레이션 함수 반환\r\n\r\nfunction checkFailureSaga() {\r\n    try {\r\n        localStorage.removeItem('user');\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try {\r\n        yield call(authAPI.logout); // logout API 호출\r\n        localStorage.removeItem('user');\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\n// 제너레이션 함수 = Saga\r\nexport function* userSaga() {\r\n    // (action type, 특정 작업)\r\n    yield takeLatest(CHECK, checkSaga); // 가장 마지막 실행된 작업만 실행\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga); // CHECK_FAILURE 액션 발생 시 localStorage의 user값을 초기화\r\n    yield takeLatest(LOGOUT, logoutSaga); // LOGOUT 액션 발생 시 logoutSaga 호출\r\n}\r\n\r\nconst initialState = {\r\n    user: null,\r\n    checkError: null,\r\n};\r\n\r\n// reducer\r\n// 스토어의 상태가 변화\r\nexport default handleActions(\r\n    {\r\n        [TEMP_SET_USER]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]: (state, { payload: user }) => ({\r\n            ...state,\r\n            user,\r\n            checkError: null,\r\n        }),\r\n        [CHECK_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            user: null,\r\n            checkError: error,\r\n        }),\r\n        [LOGOUT]: state => ({\r\n            ...state,\r\n            user: null,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Header from '../../components/common/Header';\r\nimport { logout } from '../../modules/user';\r\n\r\nconst HeaderContainer = () => {\r\n    const { user } = useSelector(({ user }) => ({ user: user.user }));\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    }\r\n    return <Header user={user} onLogout={onLogout} />;\r\n};\r\n\r\nexport default HeaderContainer;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n// 액션 타입 선언\r\nconst [\r\n    LIST_POSTS,\r\n    LIST_POSTS_SUCCESS,\r\n    LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n// 액션 생성 함수\r\nexport const listPosts = createAction(\r\n    LIST_POSTS,\r\n    ({ tag, username, page }) => ({\r\n        tag,\r\n        username,\r\n        page,\r\n    }),\r\n);\r\n// 사가 생성\r\nconst listPostSaga = createRequestSaga(LIST_POSTS, postAPI.listPosts);\r\nexport function* postsSaga() {\r\n    yield takeLatest(LIST_POSTS, listPostSaga);\r\n}\r\n// 초기 상태 설정\r\nconst initialState = {\r\n    posts: null,\r\n    error: null,\r\n    lastPage: 1,\r\n};\r\n// 리듀서\r\nconst posts = handleActions(\r\n    {\r\n        [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n            ...state,\r\n            posts,\r\n            // last-page 소문자로 작성해야함... ??? Last-Page 오류 남 ...\r\n            lastPage: parseInt(response.headers['last-page'], 10), // 문자열 숫자로 변환, 10 = 10진수\r\n        }),\r\n        [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default posts;\r\n","import client from './client';\r\nimport qs from 'qs';\r\n\r\nexport const writePost = ({ title, body, tags }) =>\r\n    client.post('/api/posts', { title, body, tags });\r\n\r\nexport const readPost = id => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({ page, username, tag }) => {\r\n    // JSON 형태로 쿼리 생성\r\n    const queryString = qs.stringify({\r\n        page,\r\n        username,\r\n        tag,\r\n    });\r\n    return client.get(`/api/posts?${queryString}`);\r\n};\r\n// 수정\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n    client.patch(`/api/posts/${id}`, {\r\n        title,\r\n        body,\r\n        tags,\r\n    });\r\n// 삭제\r\nexport const removePost = id => client.delete(`/api/posts/${id}`);\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst SubInfoBlock = styled.div`\r\n    // hasMarginTop 값이 여부에 따라 css 다르게 적용\r\n    ${props =>\r\n        props.hasMarginTop &&\r\n        css`\r\n            margin-top: 1rem;\r\n        `}\r\n    color: ${palette.gray[6]};\r\n    // span 사이에 가운뎃점 문자 보여주기\r\n    span + span:before {\r\n        color: ${palette.gray[5]};\r\n        padding-left: 0.25rem;\r\n        padding-right: 0.25rem;\r\n        content: '\\\\B7';\r\n    }\r\n`;\r\n\r\nconst SubInfo = ({ username, publishDate, hasMarginTop }) => {\r\n    return (\r\n        <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n            <span>\r\n                <b>\r\n                    {/* <Link to={`/@${username}`}>{username}</Link> */}\r\n                    <Link to={`/?username=${username}`}>{username}</Link>\r\n                </b>\r\n            </span>\r\n            <span>{new Date(publishDate).toLocaleDateString()}</span>\r\n        </SubInfoBlock>\r\n    );\r\n};\r\n\r\nexport default SubInfo;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagsBlock = styled.div`\r\n    margin-top: 0.5rem;\r\n    .tag {\r\n        display: inline-block;\r\n        color: ${palette.cyan[7]};\r\n        text-decoration: none;\r\n        margin-right: 0.5rem;\r\n        &:hover {\r\n            color: ${palette.cyan[6]};\r\n        }\r\n`;\r\n\r\nconst Tags = ({ tags }) => {\r\n    return(\r\n        <TagsBlock>\r\n            {tags.map(tag => (\r\n                <Link key={tag} to={`/?tag=${tag}`} className=\"tag\">#{tag}</Link>\r\n            ))}\r\n        </TagsBlock>\r\n    ) \r\n};\r\n\r\nexport default Tags;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n    margin-top: 3rem;\r\n`;\r\nconst WritePostButtonWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 3rem;\r\n`;\r\nconst PostItemBlock = styled.div`\r\n    padding-top: 3rem;\r\n    padding-bottom: 3rem;\r\n    // 맨 위 포스트는 padding-top 없음\r\n    &:first-child {\r\n        padding-topd: 0;\r\n    }\r\n    & + & {\r\n        border-top: 1px solid ${palette.gray[2]};\r\n    }\r\n\r\n    h2 {\r\n        font-size: 2rem;\r\n        margin-bottom: 0;\r\n        margin-top: 0;\r\n        &:hover {\r\n            color: ${palette.gray[6]};\r\n        }\r\n    }\r\n    p {\r\n        margin-top: 2rem;\r\n    }\r\n`;\r\n\r\nconst PostItem = ({ post }) => {\r\n    const { title, user, tags, publishDate, body, _id } = post;\r\n    return (\r\n        <PostItemBlock>\r\n            <h2>\r\n                <Link to={`/@${user.username}/${_id}`}>{title}</Link>\r\n            </h2>\r\n            <SubInfo username={user.username} publishDate={publishDate} />\r\n            <Tags tags={tags} />\r\n            <p>{body}</p>\r\n        </PostItemBlock>\r\n    );\r\n};\r\n\r\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\r\n    if (error) {\r\n        console.log(error);\r\n        return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\r\n    }\r\n    return (\r\n        <PostListBlock>\r\n            {/* showWriteButton(user) 값이 유효할 때만 버튼이 보임 */}\r\n            {showWriteButton && (\r\n                <WritePostButtonWrapper>\r\n                    <Button cyan to=\"/write\">\r\n                        새 글 작성\r\n                    </Button>\r\n                </WritePostButtonWrapper>\r\n            )}\r\n            {/* 로딩중이 아니고 포스트 배열이 존재할 때만 보여 줌. */}\r\n            {!loading && posts && (\r\n                <div>\r\n                    {posts.map(post => (\r\n                        <PostItem post={post} key={post._id} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </PostListBlock>\r\n    );\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { listPosts } from '../../modules/posts';\r\nimport PostList from '../../components/posts/PostList';\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n    const dispatch = useDispatch();\r\n    const { posts, error, loading, user } = useSelector(\r\n        ({ posts, loading, user }) => ({\r\n            posts: posts.posts,\r\n            error: posts.error,\r\n            loading: loading['posts/LIST_POSTS'],\r\n            user: user.user,\r\n        }),\r\n    );\r\n    useEffect(() => {\r\n        // /@:username의 경우 파라미터 값으로 읽기 때문에\r\n        // match.params로 값을 읽어야 한다.\r\n        // location.search는 쿼리를 조회할 때 사용\r\n        // const username2 = match.params.username;\r\n\r\n        // location.search으로 쿼리 조회 가능\r\n        const { page, username, tag } = qs.parse(location.search, {\r\n            ignoreQueryPrefix: true,  // ? 생략 옵션\r\n        });\r\n        dispatch(listPosts({tag, username, page}));\r\n    }, [dispatch, location.search]);\r\n\r\n\r\n    return (\r\n        <PostList\r\n            loading={loading}\r\n            error={error}\r\n            posts={posts}\r\n            showWriteButton={user}\r\n        />\r\n        // showWriteButton props는 현재 로그인 중인 사용자의 정보를 지는 user 객체로 설정\r\n        // user 객체가 유효할 때만 버튼이 나타남.\r\n    );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport qs from 'qs';\r\nimport Button from '../common/Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n    width: 320px;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 3rem;\r\n`;\r\nconst PageNumber = styled.div``;\r\nconst buildLink = ({ username, tag, page }) => {\r\n    const query = qs.stringify({ tag, page });\r\n    // return username ? `/@${username}?${query}` : `/?${query}`;\r\n\r\n    // SubInfo 컴포넌트에서 Link의 to 속성을 username이 포함된 쿼리스트링으로 작성\r\n    return username ? `/?username=${username}&${query}` : `/?${query}`;\r\n};\r\n\r\n// props: 현재 페이지 숫자, 마지막 페이지 숫자, 현재 계정명, 태그\r\nconst Pagination = ({ page, lastPage, username, tag }) => {\r\n    return (\r\n        <PaginationBlock>\r\n            <Button\r\n                disabled={page === 1}\r\n                to={\r\n                    page === 1\r\n                        ? undefined\r\n                        : buildLink({ username, tag, page: page - 1 })\r\n                }\r\n            >\r\n                이전\r\n            </Button>\r\n            <PageNumber>{page}</PageNumber>\r\n            <Button\r\n                disabled={page === lastPage}\r\n                to={\r\n                    page === lastPage\r\n                        ? undefined\r\n                        : buildLink({ username, tag, page: page + 1 })\r\n                }\r\n            >\r\n                다음\r\n            </Button>\r\n        </PaginationBlock>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Pagination from '../../components/posts/Pagination';\r\nimport { withRouter } from 'react-router-dom';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location }) => {\r\n    const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\r\n        lastPage: posts.lastPage,\r\n        posts: posts.posts,\r\n        loading: loading['posts/LIST_POSTS'],\r\n    }));\r\n\r\n    // 포스트 데이터가 없거나 로딩 중이라면 아무것도 안 보여줌.\r\n    if (!posts || loading) return null;\r\n    // 쿼리스트링에 page가 없으면 기본값은 1\r\n\r\n    // console.log(match.params)\r\n    // const username2 = match.params.username;\r\n\r\n    const { tag, username, page = 1 } = qs.parse(location.search, {\r\n        ignoreQueryPrefix: true,\r\n    });\r\n\r\n    return(\r\n        <Pagination\r\n            tag={tag}\r\n            username={username}\r\n            page={parseInt(page, 10)}\r\n            lastPage={lastPage}\r\n        />\r\n    )\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostListContainer from '../containers/posts/PostListContainer';\r\nimport PaginationContainer from '../containers/posts/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n    return(\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostListContainer />\r\n            <PaginationContainer />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PostListPage;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postAPI from '../lib//api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n// const READ_POST = 'post/READ_POST';\r\n// const READ_POST_SUCCESS = 'post/READ_POST_SUCCESS';\r\n// const READ_POST_FAILURE = 'post/READ_POST_FAILURE';\r\n\r\n// 액션 타입 선언\r\nconst [\r\n    READ_POST,\r\n    READ_POST_SUCCESS,\r\n    READ_POST_FAILURE,\r\n] = createRequestActionTypes('post/READ_POST');\r\n// 포스트 페이지에서 벗어날 때 리덕스 상태의 데이터 비우기\r\nconst UNLOAD_POST = 'post/UNLOAD_POST';\r\n\r\n// 액션 생성 함수\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\n// 사가 함수\r\nconst readPostSaga = createRequestSaga(READ_POST, postAPI.readPost);\r\nexport function* postSaga() {\r\n    yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    post: null,\r\n    error: null,\r\n};\r\n\r\n// 리듀서\r\nconst post = handleActions(\r\n    {\r\n        [READ_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [READ_POST_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n        [UNLOAD_POST]: () => initialState,\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default post;\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n    margin-top: 4rem;\r\n`;\r\nconst PostHead = styled.div`\r\n    border-bottom: 1px solid ${palette.gray[2]};\r\n    padding-bottom: 3rem;\r\n    margin-bottom: 3rem;\r\n    h1 {\r\n        font-size: 3rem;\r\n        line-height: 1.5;\r\n        margin: 0;\r\n    }\r\n`;\r\nconst PostContent = styled.div`\r\n    font-size: 1.3125rem;\r\n    color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({ post, error, loading, actionButtons, ownPost }) => {\r\n    // 에러 발생 시\r\n    if (error) {\r\n        if (error.response && error.response.status === 404) {\r\n            return (\r\n                <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>\r\n            );\r\n        }\r\n        return <PostViewerBlock>오류 발생</PostViewerBlock>;\r\n    }\r\n\r\n    // 로딩 중이거나 아직 포스트 데이터가 없을 때\r\n    if (loading || !post) {\r\n        return null;\r\n    }\r\n\r\n    const { title, body, user, publishDate, tags } = post;\r\n    return (\r\n        <PostViewerBlock>\r\n            <Helmet>\r\n                <title>{title}</title>\r\n            </Helmet>\r\n            <PostHead>\r\n                <h1>{title}</h1>\r\n                <SubInfo\r\n                    hasMarginTop\r\n                    username={user.username}\r\n                    publishDate={publishDate}\r\n                />\r\n                <Tags tags={tags} />\r\n            </PostHead>\r\n            {/* 현재 유저와 post 작성자가 같을 때 버튼 보임 */}\r\n            {ownPost && actionButtons}\r\n            <PostContent\r\n                dangerouslySetInnerHTML={{\r\n                    __html: body,\r\n                }}\r\n            />\r\n        </PostViewerBlock>\r\n    );\r\n};\r\n\r\nexport default PostViewer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../../components/common/Button';\r\n\r\nconst FullScreen = styled.div`\r\n    position: fixed;\r\n    z-index: 30;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n    width: 320px;\r\n    background: white;\r\n    border-radius: 4px;\r\n    padding: 1.5rem;\r\n    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n    h2 {\r\n        margin-top: 0;\r\n        margin-bottom: 1rem;\r\n    }\r\n    p {\r\n        margin-bottom: 3rem;\r\n    }\r\n    .buttons {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n`;\r\nconst StyledButton = styled(Button)`\r\n    height: 2rem;\r\n    & + & {\r\n        margin-left: 0.75rem;\r\n    }\r\n`;\r\n\r\nconst AskModal = ({\r\n    visible,\r\n    title,\r\n    description,\r\n    confirmText = '삭제',\r\n    cancelText = '취소',\r\n    onConfirm,\r\n    onCancel,\r\n}) => {\r\n    if(!visible) return null;\r\n    return (\r\n        <FullScreen>\r\n            <AskModalBlock>\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <div className=\"buttons\">\r\n                    <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n                    <StyledButton cyan onClick={onConfirm}>{confirmText}</StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </FullScreen>\r\n    );\r\n};\r\n\r\nexport default AskModal;\r\n","import React from 'react';\r\nimport AskModal from '../common/AskModal';\r\n\r\nconst AskRemoveModal = ({ visible, onCancel, onConfirm }) => {\r\n    return (\r\n        <AskModal\r\n            visible={visible}\r\n            onCancel={onCancel}\r\n            onConfirm={onConfirm}\r\n            title='포스트 삭제'\r\n            description='포스트를 정말 삭제하시겠습니까?'\r\n        />\r\n    );\r\n};\r\n\r\nexport default AskRemoveModal;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport AskRemoveModal from './AskRemoveModal';\r\n\r\nconst PostActionButtonsBlock = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 2rem;\r\n    margin-top: -1.5rem;\r\n`;\r\nconst ActionButton = styled.button`\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 4px;\r\n    color: ${palette.gray[6]};\r\n    font-weight: bold;\r\n    border: none;\r\n    outline none;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: ${palette.gray[1]};\r\n        color: ${palette.cyan[7]};\r\n    }\r\n    & + & {\r\n        margin-left: 0.25rem;\r\n    }\r\n`;\r\n\r\n// PostActionButtonsContainer로부터 props 전달받음\r\nconst PostActionButtons = ({ onEdit, onRemove }) => {\r\n    // modal 창 \r\n    const [modal, setModal] = useState(false);\r\n    // 모달 창 on\r\n    const onRemoveClick = () => {\r\n        setModal(true)\r\n    }\r\n    // 모달 창 off\r\n    const onCancel = () =>{\r\n        setModal(false);\r\n    }\r\n    // 모달 창에서 삭제 클릭\r\n    const onConfirm = () =>{\r\n        setModal(false); // 모달 창 off\r\n        onRemove(); // 포스트 삭제 API 호출\r\n    }\r\n    return (\r\n        <>\r\n            <PostActionButtonsBlock>\r\n                <ActionButton onClick={onEdit}>수정</ActionButton>\r\n                <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n            </PostActionButtonsBlock>\r\n            <AskRemoveModal \r\n                visible={modal}\r\n                onCancel={onCancel}\r\n                onConfirm={onConfirm}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostActionButtons;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as postAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\n// 액션 타입 선언\r\nconst INITIAILIZE = 'write/INITIAILIZE'; // 내용 초기화\r\nconst CHANGE_FILED = 'write/CHANGE_FILED'; // 특정 key 바꾸기\r\n// 포스트 작성\r\nconst WRITE_POST = 'write/WRITE_POST';\r\nconst WRITE_POST_SUCCESS = 'write/WRITE_POST_SUCCESS';\r\nconst WRITE_POST_FAILURE = 'write/WRITE_POST_FAILURE';\r\n// 포스트 기존 내용 가져오기\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\n// 포스트 수정\r\nconst UPDATE_POST = 'write/UPDATE_POST';\r\nconst UPDATE_POST_SUCCESS = 'write/UPDATE_POST_SUCCESS';\r\nconst UPDATE_POST_FAILURE = 'write/UPDATE_POST_FAILURE';\r\n\r\n// 액션 생성 함수, container 컴포넌트에서 함수 디스패치하여 사용\r\nexport const initialize = createAction(INITIAILIZE);\r\nexport const changeField = createAction(CHANGE_FILED, ({ key, value }) => ({\r\n    key,\r\n    value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n    title,\r\n    body,\r\n    tags,\r\n}));\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\r\nexport const updatePost = createAction(\r\n    UPDATE_POST,\r\n    ({ id, title, body, tags }) => ({\r\n        id,\r\n        title,\r\n        body,\r\n        tags,\r\n    }),\r\n);\r\n\r\n// 사가 생성\r\n// request = API 함수\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postAPI.updatePost);\r\nexport function* writeSaga() {\r\n    yield takeLatest(WRITE_POST, writePostSaga);\r\n    yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    title: '',\r\n    body: '',\r\n    tags: [],\r\n    post: null,\r\n    postError: null,\r\n    originalPostId: null,\r\n};\r\n\r\n// 리듀서\r\nconst write = handleActions(\r\n    {\r\n        [INITIAILIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n        [CHANGE_FILED]: (state, { payload: { key, value } }) => ({\r\n            ...state,\r\n            [key]: value, // 특정 키 값을 업데이트 , 키 값은 body, title\r\n            // body: 'value' or title: 'value'\r\n        }),\r\n        // post, postError 초기화\r\n        [WRITE_POST]: state => ({\r\n            ...state,\r\n            post: null,\r\n            postError: null,\r\n        }),\r\n        // 포스트 작성 성공\r\n        // 포스트 작성 API 호출 후 결과 값이 post에 담김\r\n        [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        // 포스트 작성 실패\r\n        [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n            ...state,\r\n            postError,\r\n        }),\r\n        [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n            title: post.title,\r\n            body: post.body,\r\n            tags: post.tags,\r\n            originalPostId: post._id,\r\n        }),\r\n        [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n            ...state,\r\n            postError,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default write;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom'; // URL 파라미터 match 객체를 사용하기 위해서 불러옴.\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n    const dispatch = useDispatch();\r\n    // 처음 마운트될 때 포스트 읽기 API 요청\r\n    const { postId } = match.params;\r\n    // post, loading 모듈\r\n    const { post, error, loading, user } = useSelector(\r\n        ({ post, loading, user }) => ({\r\n            post: post.post,\r\n            error: post.error,\r\n            loading: loading['post/READ_POST'], // ???\r\n            user: user.user,\r\n        }),\r\n    );\r\n\r\n    useEffect(() => {\r\n        // API 함수 호출\r\n        dispatch(readPost(postId));\r\n        // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n        return () => {\r\n            dispatch(unloadPost());\r\n        };\r\n    }, [dispatch, postId]);\r\n\r\n    const onEdit = () => {\r\n        dispatch(setOriginalPost(post));\r\n        history.push('/write'); // write 페이지 이동\r\n    };\r\n\r\n    const onRemove = async () => {\r\n        try {\r\n            await removePost(postId);\r\n            history.push('/'); // 홈으로 이동\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <PostViewer\r\n            post={post}\r\n            loading={loading}\r\n            error={error}\r\n            actionButtons={\r\n                <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\r\n            } // 컴포넌트를 props로 전달\r\n            // 현재 사용자가 보고 있는 포스트가 자신의 포스트 인지 체크\r\n            ownPost={user && post && user._id === post.user._id}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../containers/common/HeaderContainer';\r\nimport PostViewerContainer from '../containers/post/PostViewerContainer';\r\n\r\nconst PostPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer />\r\n            <PostViewerContainer />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// 회원가입, 로그인 페이지의 레이아웃 담당\r\n\r\n// 화면 전체를 채움\r\nconst AuthTemplateBlock = styled.div`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background: ${palette.gray[2]};\r\n\r\n    // flex로 내부 중앙 정렬\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\n// 흰색 박스\r\nconst WhiteBox = styled.div`\r\n    .logo-area{\r\n        display: block;\r\n        padding-bottom: 2rem;\r\n        text-align: center;\r\n        font-weight: bold;\r\n        letter-spacing: 2px;\r\n    }\r\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n    padding: 2rem;\r\n    width: 360px;\r\n    background: white;\r\n    border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({ children }) => {\r\n    return (\r\n        <AuthTemplateBlock>\r\n            <WhiteBox>\r\n                <div className=\"logo-area\">\r\n                    <Link to=\"/\">REACTERS</Link>\r\n                </div>\r\n                {children}\r\n            </WhiteBox>\r\n        </AuthTemplateBlock>\r\n    );\r\n};\r\n\r\nexport default AuthTemplate;","import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\n// 액션 타입 선언\r\nconst CHANGE_FILED = 'auth/CHANGE_FILED';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst REGISTER = 'auth/REGISTER';\r\nconst REGISTER_SUCCESS = 'auth/REGISTER_SUCCESS';\r\nconst REGISTER_FAILURE = 'auth/REGISTER_FAILURE';\r\n\r\nconst LOGIN = 'auth/LOGIN';\r\nconst LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS';\r\nconst LOGIN_FAILURE = 'auth/LOGIN_FAILURE';\r\n\r\n// 액션 생성 함수\r\nexport const changeField = createAction(\r\n    CHANGE_FILED,\r\n    ({ form, key, value }) => ({\r\n        form, // register, login\r\n        key, // username, password, passwordConfirm\r\n        value, // 실제 바꾸려는 값\r\n    }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register, login\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n    username,\r\n    password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n    username,\r\n    password,\r\n}));\r\n\r\n// 사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n    yield takeLatest(REGISTER, registerSaga); // 가장 마지막 작업만 수행\r\n    yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\n// 초기 상태 설정\r\nconst initialState = {\r\n    register: {\r\n        username: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n    },\r\n    login: {\r\n        username: '',\r\n        password: '',\r\n    },\r\n    auth: null,\r\n    authError: null,\r\n};\r\n\r\n// 리듀서\r\nconst auth = handleActions(\r\n    {\r\n        // 파라미터 값들은 payload 사용\r\n        [CHANGE_FILED]: (state, { payload: { form, key, value } }) =>\r\n            // immer 적용\r\n            produce(state, draft => {\r\n                draft[form][key] = value; // ex: state.register.username을 바꿈.\r\n            }),\r\n        [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n            authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n        }),\r\n        // 회원가입 성공\r\n        [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n            ...state,\r\n            auth,\r\n            authError: null,\r\n        }),\r\n        // 회원 가입 실패\r\n        [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            authError: error,\r\n        }),\r\n        // 로그인 성공\r\n        [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n            ...state,\r\n            auth,\r\n            authError: null,\r\n        }),\r\n        // 로그인 실패\r\n        [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n            ...state,\r\n            authError: error,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default auth;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette';\r\nimport Button from '../common/Button';\r\n\r\n// 회원가입 or 로그인 폼을 보여줌\r\n\r\nconst AuthFormBlock = styled.div`\r\n    h3 {\r\n        margin: 0;\r\n        color: ${palette.gray[8]};\r\n        margin-bottom: 1rem;\r\n    }\r\n`;\r\n\r\n// 스타일링 input\r\nconst StyleInput = styled.input`\r\n    font-size: 1rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[5]};\r\n    padding-bottom: 0.5rem;\r\n    outline: none;\r\n    width: 100%;\r\n    &:focus {\r\n        color: $oc-teal-7;\r\n        border-bottom: 1px solid ${palette.gray[7]};\r\n    }\r\n    & + & {\r\n        margin-top: 1rem;\r\n    }\r\n`;\r\n\r\n// 폼 하단에 로그인 or 회원가입 링크를 보여 줌\r\nconst Footer = styled.div`\r\n    margin-top: 2rem;\r\n    text-align: right;\r\n    a {\r\n        color: ${palette.gray[6]};\r\n        text-decoration: underline;\r\n        &:hover: {\r\n            color: ${palette.gray[9]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst textMap = {\r\n    login: '로그인',\r\n    register: '회원가입',\r\n};\r\n\r\n// 에러 메세지\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    text-align: center;\r\n    font-size: 0.875rem;\r\n    font-weight: 800;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\r\n    const text = textMap[type];\r\n    return (\r\n        <AuthFormBlock>\r\n            <h3>{text}</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <StyleInput\r\n                    authComplete=\"username\"\r\n                    name=\"username\"\r\n                    placeholder=\"아이디\"\r\n                    onChange={onChange}\r\n                    value={form.username}\r\n                />\r\n                <StyleInput\r\n                    authComplete=\"new-password\"\r\n                    name=\"password\"\r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\"\r\n                    onChange={onChange}\r\n                    value={form.password}\r\n                />\r\n                {type === 'register' && (\r\n                    <StyleInput\r\n                        authComplete=\"new-password\"\r\n                        name=\"passwordConfirm\"\r\n                        placeholder=\"비밀번호 확인\"\r\n                        type=\"password\"\r\n                        onChange={onChange}\r\n                        value={form.passwordConfirm}\r\n                    />\r\n                )}\r\n                {/* props로 전달받은 error 값에 따른 에러 메세지 출력*/}\r\n                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                <Button cyan fullWidth style={{ marginTop: '1rem' }}>\r\n                    {text}\r\n                </Button>\r\n            </form>\r\n            <Footer>\r\n                {type === 'register' ? (\r\n                    <Link to=\"/login\">로그인</Link>\r\n                ) : (\r\n                    <Link to=\"/register\">회원가입</Link>\r\n                )}\r\n            </Footer>\r\n        </AuthFormBlock>\r\n    );\r\n};\r\n\r\nexport default AuthForm;\r\n","// 리덕스와 연동을 위한 컨테이너 컴포넌트\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, login } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst LoginForm = ({ history }) => {\r\n    // error state 관리를 위해 useState hook 사용\r\n    const [error, setError] = useState(null);\r\n\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.login,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user,\r\n    }));\r\n\r\n    // 인풋 변경 인벤트 핸들러\r\n    const onChange = e => {\r\n        const { value, name } = e.target;\r\n        // dispatch 호출 시 스토어는 리듀서 함수 실행\r\n        dispatch(\r\n            changeField({\r\n                form: 'login',\r\n                key: name,\r\n                value,\r\n            }),\r\n        );\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const { username, password } = form;\r\n        dispatch(login({ username, password }));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form을 초기화\r\n    useEffect(() => {\r\n        dispatch(initializeForm('login'));\r\n    }, [dispatch]);\r\n\r\n    // 로그인 성공 / 실패 처리\r\n    useEffect(() => {\r\n        if (authError) {\r\n            console.log('오류 발생');\r\n            console.log(authError);\r\n            setError('로그인 실패');\r\n            return;\r\n        }\r\n        if (auth) {\r\n            console.log('로그인 성공');\r\n            console.log(auth);\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    // 유저 값이 설정되어 있으면 홈 화면으로\r\n    // 로그인 상태라면 홈 화면으로\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/');\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n\r\n    // 렌더링\r\n    return (\r\n        <AuthForm\r\n            type=\"login\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport LoginForm from '../containers/auth/LoginForm';\r\n\r\nconst LoginPage = () => {\r\n    return(\r\n        <AuthTemplate>\r\n            <LoginForm/>\r\n        </AuthTemplate>\r\n    ) \r\n};\r\n\r\nexport default LoginPage;\r\n","// 리덕스와 연동을 위한 컨테이너 컴포넌트\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth'; // 액션 생성 함수\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n    // 에러 상태 처리를 위한 useState\r\n    const [error, setError] = useState(null);\r\n    // 에러 발생 경우\r\n    // username, password, passwordConfirm 중 하나라도 비어 있을 때\r\n    // password와 passwordConfirm 값이 일치하지 않을 때\r\n    // username이 중복될 때\r\n\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        // state.auth.~\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user,\r\n    }));\r\n\r\n    // 인풋 변경 인벤트 핸들러\r\n    const onChange = e => {\r\n        const { value, name } = e.target;\r\n        // console.log(e.target);\r\n        // dispatch 호출 시 스토어는 리듀서 함수 실행\r\n        dispatch(\r\n            changeField({\r\n                form: 'register',\r\n                key: name,\r\n                value,\r\n            }),\r\n        );\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const { username, password, passwordConfirm } = form;\r\n        // username, password, passwordConfirm 중 하나라도 비어 있을 때\r\n        if ([username, password, passwordConfirm].includes('')) {\r\n            setError('빈 칸을 모두 입력하세요.');\r\n            return;\r\n        }\r\n        // password와 passwordConfirm 값이 일치하지 않을 때\r\n        if (password !== passwordConfirm) {\r\n            setError('비밀번호가 일치하지 않습니다.');\r\n            return;\r\n        }\r\n        // 액션 디스패치 > 액션 생성함수 실행\r\n        dispatch(register({ username, password }));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form을 초기화\r\n    useEffect(() => {\r\n        dispatch(initializeForm('register'));\r\n    }, [dispatch]);\r\n\r\n    // 회원가입 성공 / 실패 처리\r\n    useEffect(() => {\r\n        if (authError) {\r\n            // username이 중복될 때\r\n            if (authError.response.status === 409) {\r\n                // Confict\r\n                setError('이미 존재하는 계정입니다.');\r\n                return;\r\n            }\r\n            // 기타 이유\r\n            setError('회원가입 실패');\r\n            return;\r\n        }\r\n        if (auth) {\r\n            // console.log('회원가입 성공');\r\n            dispatch(check()); // check 액션 생성 함수 디스패치\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    // user 값이 잘 설정되었는지 확인\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/'); // 홈 화면 이동\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n\r\n    // 렌더링\r\n    return (\r\n        <AuthForm\r\n            type=\"register\"\r\n            form={form}\r\n            onChange={onChange}\r\n            onSubmit={onSubmit}\r\n            error={error}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterForm);\r\n","import React from 'react';\r\nimport AuthTemplate from '../components/auth/AuthTemplate';\r\nimport RegisterForm from '../containers/auth/RegisterForm'\r\n\r\nconst RegisterPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <RegisterForm/>\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;","import React, { useRef, useEffect } from 'react';\r\nimport Quill from 'quill';\r\nimport 'quill/dist/quill.bubble.css';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\nimport Responsive from '../common/Responsive';\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n    padding-top: 5rem;\r\n    padding-bottom: 5rem;\r\n`;\r\nconst TitleInput = styled.input`\r\n    font-size: 3rem;\r\n    outline: none;\r\n    padding-bottom: 0.5rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[4]};\r\n    margin-bottom: 2rem;\r\n    width: 100%;\r\n`;\r\nconst QuillWrapper = styled.div`\r\n    // 최소 크키 지정 및 padding 제거\r\n    .ql-editor {\r\n        padding: 0;\r\n        min-height: 320px;\r\n        font-size: 1.125rem;\r\n        lien-height: 1.5;\r\n    }\r\n    .ql-editor.ql-blank::before {\r\n        left: 0px;\r\n    }\r\n`;\r\n\r\nconst Editor = ({ title, body, onChangeField }) => {\r\n    const quillElement = useRef(null); // Quill을 적용할 DivElement 설정\r\n    const quillInstance = useRef(null); // Quill을 적용할 인스턴스 설정\r\n\r\n    useEffect(() => {\r\n        quillInstance.current = new Quill(quillElement.current, {\r\n            theme: 'bubble',\r\n            placeholder: '내용을 입력하세요...',\r\n            modules: {\r\n                toolbar: [\r\n                    [{ header: '1' }, { header: '2' }],\r\n                    ['bold', 'italic', 'underline', 'strike'],\r\n                    [{ list: 'ordered' }, { list: 'bullet' }],\r\n                    ['blockquote', 'code-block', 'link', 'image'],\r\n                ],\r\n            },\r\n        });\r\n        // quill에 text-change 이벤트 핸들러 등록\r\n        // https://quilljs.com/docs/api/#events\r\n        const quill = quillInstance.current;\r\n        quill.on('text-change', (delta, oldDelta, source) => {\r\n            if (source === 'user') {\r\n                onChangeField({ key: 'body', value: quill.root.innerHTML });\r\n            }\r\n        });\r\n    }, [onChangeField]);\r\n\r\n    //useRef를 통해 만든 객체 안의 current 값은 실제 엘리먼트 값\r\n    const mounted = useRef(false); \r\n    useEffect(()=>{\r\n        if(mounted.current) return; // mounted.current 값이 false일 때만 실행 됨.\r\n        mounted.current = true;\r\n        quillInstance.current.root.innerHTML = body;\r\n    }, [body])\r\n\r\n    // title은 input\r\n    const onChangeTitle = e => {\r\n        onChangeField({ key: 'title', value: e.target.value });\r\n    };\r\n\r\n    return (\r\n        <EditorBlock>\r\n            <TitleInput\r\n                placeholder=\"제목을 입력하세요\"\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n            />\r\n            <QuillWrapper>\r\n                <div ref={quillElement} />\r\n            </QuillWrapper>\r\n        </EditorBlock>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport Editor from '../../components/write/Editor';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { initialize, changeField } from '../../modules/write';\r\n\r\nconst EditorContainer = () => {\r\n    const dispatch = useDispatch();\r\n    // write 모듈의 상태 조회 = 리덕스 스토어에서 불러옴\r\n    const { title, body } = useSelector(({ write }) => ({\r\n        title: write.title,\r\n        body: write.body,\r\n    }));\r\n    const onChangeField = useCallback(\r\n        // payload = { key, value }\r\n        payload => dispatch(changeField(payload)),\r\n        [dispatch],\r\n    );\r\n    // 언마운트될 때 초기화 = write 관련 상태 초기화\r\n    useEffect(() => {\r\n        // return = 언마운트\r\n        return () => {\r\n            dispatch(initialize());\r\n        };\r\n    }, [dispatch]);\r\n\r\n    return <Editor onChangeField={onChangeField} title={title} body={body}></Editor>;\r\n};\r\n\r\nexport default EditorContainer;\r\n","import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n    width: 100%;\r\n    border-top: 1px solid ${palette.gray[2]};\r\n    padding-top: 2rem;\r\n\r\n    h4 {\r\n        color: ${palette.gray[8]};\r\n        margin-top: 0;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    display: flex;\r\n    width: 256px;\r\n    border: 1px solid ${palette.gray[9]};\r\n    // 스타일 초기화\r\n    input,\r\n    button {\r\n        outline: none;\r\n        border: none;\r\n        font-size: rem;\r\n    }\r\n\r\n    input {\r\n        padding: 0.5rem;\r\n        flex: 1;\r\n    }\r\n    button {\r\n        cursor: pointer;\r\n        padding-right: 1rem;\r\n        padding-left: 1rem;\r\n        border: none;\r\n        background: ${palette.gray[8]};\r\n        color: white;\r\n        font-weight: bold;\r\n        &:hover {\r\n            background: ${palette.gray[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n    margin-right: 0.5rem;\r\n    color: ${palette.gray[6]};\r\n    cursor: pointer;\r\n    &:hover {\r\n        opacity: 0.5;\r\n    }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n    display: flex;\r\n    margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링 처리\r\nconst TagItem = React.memo(({ tag, onRemove }) => (\r\n    <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n    <TagListBlock>\r\n        {tags.map(tag => (\r\n            <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n        ))}\r\n    </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n    const [input, setInput] = useState('');\r\n    const [localTags, setLocalTags] = useState([]);\r\n\r\n    const insertTag = useCallback(\r\n        tag => {\r\n            if (!tag) return; // 공백이면 추가 x\r\n            if (localTags.includes(tag)) return; // 이미 존재한다면 추가 x\r\n            const nextTags = [...localTags, tag];\r\n            setLocalTags(nextTags); // 리액트 앱 상태 업데이트\r\n            onChangeTags(nextTags); // 리덕스 스토어의 상태 업데이트\r\n        },\r\n        [localTags, onChangeTags],\r\n    );\r\n\r\n    const onRemove = useCallback(\r\n        tag => {\r\n            const nextTags = localTags.filter(t => t !== tag);\r\n            setLocalTags(nextTags);\r\n            onChangeTags(nextTags);\r\n        },\r\n        [localTags, onChangeTags],\r\n    );\r\n\r\n    const onChange = useCallback(e => {\r\n        setInput(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            e.preventDefault();\r\n            insertTag(input.trim()); // 앞뒤 공백 제거 후 등록\r\n            setInput('');\r\n        },\r\n        [input, insertTag],\r\n    );\r\n\r\n    // tags 값이 바뀔 때\r\n    useEffect(() => {\r\n        setLocalTags(tags);\r\n    }, [tags]);\r\n\r\n    return (\r\n        <TagBoxBlock>\r\n            <h4>태그</h4>\r\n            <TagForm onSubmit={onSubmit}>\r\n                <input\r\n                    placeholder=\"태그를 입력하세요\"\r\n                    value={input}\r\n                    onChange={onChange}\r\n                />\r\n                <button type=\"submit\">추가</button>\r\n            </TagForm>\r\n            <TagList tags={localTags} onRemove={onRemove} />\r\n        </TagBoxBlock>\r\n    );\r\n};\r\n\r\nexport default TagBox;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport TagBox from '../../components/write/TagBox';\r\nimport { changeField } from '../../modules/write';\r\n\r\nconst TagBoxContainer = () => {\r\n    const dispatch = useDispatch();\r\n    // write 모듈 스토어의 tags\r\n    const tags = useSelector(state => state.write.tags);\r\n    // const { tags } = useSelector(({ write }) => ({\r\n    //     tags: write.tags,\r\n    // }));\r\n\r\n    const onChangeTags = nextTags => {\r\n        dispatch(\r\n            changeField({\r\n                key: 'tags',\r\n                value: nextTags,\r\n            }),\r\n        );\r\n    };\r\n\r\n    return <TagBox onChangeTags={onChangeTags} tags={tags}></TagBox>;\r\n};\r\n\r\nexport default TagBoxContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\n\r\nconst WriteActionButtonBlock = styled.div`\r\n    margin-top: 1rem;\r\n    margin-bottom: 3rem;\r\n    button + button {\r\n        margin-left: 0.5rem;\r\n    }\r\n`;\r\n\r\n// TagBox 에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 설정\r\nconst StyleButton = styled(Button)`\r\n    height: 2.125rem;\r\n    & + & {\r\n        margin-left: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst WriteActionButton = ({ onCancel, onPublish, isEdit }) => {\r\n    return (\r\n        <WriteActionButtonBlock>\r\n            <StyleButton cyan onClick={onPublish}>\r\n                {/* isEdit 값에 따라서 다른 문구 출력 */}\r\n                포스트 {isEdit ? '수정' : '등록' } \r\n            </StyleButton>\r\n            <StyleButton onClick={onCancel}>취소</StyleButton>\r\n        </WriteActionButtonBlock>\r\n    );\r\n};\r\n\r\nexport default WriteActionButton;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport WriteActionButton from '../../components/write/WriteActionButton';\r\nimport { writePost, updatePost } from '../../modules/write';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst WriteActionButtonsContainers = ({ history }) => {\r\n    const dispatch = useDispatch();\r\n    // useSelector를 사용하여 write 리덕스 모듈의 상태를 조회\r\n    const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n        ({ write }) => ({\r\n            title: write.title,\r\n            body: write.body,\r\n            tags: write.tags,\r\n            post: write.post,\r\n            postError: write.postError,\r\n            originalPostId: write.originalPostId,\r\n        }),\r\n    );\r\n\r\n    // 포스트 등록\r\n    // distpatch 함수를 사용해 write 모듈의 writePost 함수\r\n    const onPublish = () => {\r\n        // originalPostId 값이 존재하면 수정\r\n        if (originalPostId) {\r\n            dispatch(\r\n                updatePost({\r\n                    id: originalPostId,\r\n                    title,\r\n                    body,\r\n                    tags,\r\n                }),\r\n            );\r\n            return;\r\n        }\r\n        dispatch(\r\n            writePost({\r\n                title,\r\n                body,\r\n                tags,\r\n            }),\r\n        );\r\n    };\r\n\r\n    // 취소\r\n    const onCancel = () => {\r\n        history.goback();\r\n    };\r\n\r\n    // 성공 or 취소 시 작업\r\n    useEffect(() => {\r\n        if (post) {\r\n            const { _id, user } = post;\r\n            // 페이지 이동\r\n            history.push(`/@${user.username}/${_id}`);\r\n        }\r\n        if (postError) {\r\n            console.log(postError);\r\n        }\r\n    }, [history, post, postError]);\r\n    return <WriteActionButton onPublish={onPublish} onCancel={onCancel} isEdit={originalPostId} />;\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainers);\r\n","import React from 'react';\r\nimport EditorContainer from '../containers/write/EditorContainer';\r\nimport TagBoxContainer from '../containers/write/TagBoxContainer';\r\nimport Responsive from '../components/common/Responsive';\r\nimport WriteActionButtonsContainers from '../containers/write/WriteActionButtonsContainers'\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst WritePage = () => {\r\n    return (\r\n        <Responsive>\r\n            <Helmet>\r\n                <title>글 작성하기 - REACTERS</title>\r\n            </Helmet>\r\n            <EditorContainer/>\r\n            <TagBoxContainer/>\r\n            <WriteActionButtonsContainers/>\r\n        </Responsive>\r\n    );\r\n};\r\n\r\nexport default WritePage;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/PostListPage';\nimport PostPage from './pages/PostPage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport WritePage from './pages/WritePage';\nimport { Helmet } from 'react-helmet-async';\n\nfunction App() {\n  return (\n    <>\n      <Helmet>\n        <title>REACTERS</title>\n      </Helmet>\n      {/* [] path를 배열 형태로 넣어 줌. 한 라우트 컴포넌트에서 여러 개의 경로를 설정 가능 */}\n      <Route component={PostListPage} path={['/@:username', '/']} exact />\n      <Route component={LoginPage} path='/login' />\n      <Route component={RegisterPage} path='/register' />\n      <Route component={WritePage} path='/write' />\n      <Route component={PostPage} path='/@:username/:postId' />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport loading from './loading';\r\nimport { all } from 'redux-saga/effects';\r\nimport auth, { authSaga } from './auth';\r\nimport user, { userSaga } from './user';\r\nimport write, { writeSaga } from './write';\r\nimport post, { postSaga } from './post'; // 단일 포스트\r\nimport posts, { postsSaga } from './posts'; // 포스트 목록\r\n\r\n// 루트 리듀서\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n    write,\r\n    post,\r\n    posts,\r\n});\r\n\r\n// 루트 사가\r\nexport function* rootSaga() {\r\n    // all : 여러 사가를 합쳐줌\r\n    yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer, { rootSaga } from './modules/root';\nimport createSagaMiddleware from 'redux-saga';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\n// redux-saga 적용\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n    try {\n        // 로그인, 회원가입 시 localStorage에 저장한 값을 가져옴\n        const user = localStorage.getItem('user');\n        if (!user) return; // 로그인 상태가 아니면 리턴\n\n        store.dispatch(tempSetUser(user)); // 임시 로그인 상태??\n        store.dispatch(check(user)); // 사용자가 로그인 상태인지 체크\n    } catch (e) {\n        console.log('localStorage is not working');\n    }\n}\n\nsagaMiddleware.run(rootSaga);\n// sagaMiddleware.run이 호출된 이후에 loadUser 호출\n// CHECK 액션을 디스패치했을 때 사가에서 이를 제대로 처리하기 위해서\nloadUser();\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <HelmetProvider>\n                <App />\n            </HelmetProvider>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}